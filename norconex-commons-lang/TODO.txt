TODO:
==============

- Is Pipeline really needed with Java 8. Could functional interfaces do it?

- Replace/refactor process execution to use new process features of Java 8.

- See if we eliminate JEF, have more options in this lib.

- Remove all @since 1.x???

- Remove all classes supported by Apache Commons.

- Reduce depedencies wherever possible.

- Redo website so it looks closer to collectors?

- Redo download page so we no longer need to have a "currentRelease" property
  in pom.xml

- Consider using Apache Commons Exec to replace SystemCommand? -- NO: Java 8

- Allows to specify a velocity-tools.properties or equivalent in classpath
  root (e.g. classes/ folder) to define custom classes/tools to be used 
  by Velocity.

- Upgrade to Commons Configuration 2.x
- Upgrade to Apache Velocity 2.x when available in Maven.

    - See after upgrading above two if we can get rid of 
      Commons Collections 3.x and Commons Lang 2.x 

- Upgrade to slf4j.

- Modify Jar copier to handle cases where snapshot are timestamped instead and
  not being considered the latest when they should.  Like:
  norconex-commons-lang-1.13.0-20170328.184247-17.jar vs 
  norconex-commons-lang-1.13.0-SNAPSHOT.jar
  https://github.com/Norconex/collector-http/issues/331#issuecomment-290196986

- Redo DurationUtil to be more flexible (using fluid builder approach.
  or check Apache or Java 8 equivalent classes if they can be made as flexible.
  Look at:
    https://commons.apache.org/proper/commons-lang/javadocs/api-3.5/index.html?org/apache/commons/lang3/time/DurationFormatUtils.html
    http://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatterBuilder.html
    http://joda-time.sourceforge.net/apidocs/org/joda/time/format/PeriodFormatterBuilder.html
