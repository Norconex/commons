<xml>
  <!--
    <condition> tags without "class" attribute are using XMLFlow default 
    predicate type, which is for this test "PropertyMatcherCondition".
    -->
  <if>
    <!--
      This condition has no "class" attribute, so uses fallback predicate,
      which is registered to be PropertyMatcherCondition.
      -->
    <condition>
      <fieldMatcher>car</fieldMatcher>
      <valueMatcher>volvo</valueMatcher>
    </condition>
    <then>
      <handler class="MockUppercaseConsumer">
        <field>firstName</field>
      </handler>
    </then>
    <else>
      <handler class="MockUppercaseConsumer">
        <field>lastName</field>
      </handler>
    </else>
  </if>
  
  <if>
    <!--
      Grouping multiple conditions with AND operator.
      -->
    <conditions operator="AND">
      <!--
        This condition will be evaluated using an instance of the class
        represented by the "class" attribute.
        -->
      <condition class="MockMapSizeEqualsCondition">
        <size>3</size>
      </condition>
      <condition>
        <fieldMatcher>car</fieldMatcher>
        <valueMatcher>toyota</valueMatcher>
      </condition>
    </conditions>
    <then>
      <aConsumer class="MockLowercaseConsumer">
        <field>firstName</field>
      </aConsumer>
      <!-- Nested ifNot condition -->
      <ifNot>
        <condition>
          <fieldMatcher>firstName</fieldMatcher>
          <valueMatcher>john</valueMatcher>
        </condition>
        <then>
          <anotherConsumer class="MockLowercaseConsumer">
            <field>lastName</field>
          </anotherConsumer>
        </then>
        <else>
          <!-- Picks up default consumer: MockUppercaseConsumer -->
          <noClassConsumer>
            <field>lastName</field>
          </noClassConsumer>
        </else>
      </ifNot>
    </then>
  </if>
</xml>
